#-------------------------------------------- 
#------------ User Configuration ------------
#--------------------------------------------
  substitutions:
    device_name: "melachaplug"      # access web UI using http://melachaplug.local/ or it's IP
    friendly_name: "Melacha Plug"
    
    relay_1_gpio: "13"              # Switch this section
    built_in_led_gpio: "2"          # based on your chip
    button_1_gpio:  "4"
    
    deg_shabbos_start:  "4"         # check a bit early just in case (shkiah is at -0.833)
    deg_shabbos_end:  "-8.5"        # time based off Alter Rebbe https://www.chabad.org/3209349
    deg_tzeit: "-6"
  
    timezone: America/New_York      # check format https://en.wikipedia.org/wiki/List_of_tz_database_time_zones
  
    latitude: 40.66901°             # change to your location (important for proper zmanim)
    longitude: -73.94287°           # 770 Chabad Lubavitch World Headquarters
    manual_location: "false"          # change to true if you are setting the location above
  
  # Switch this section based on your chip
  # esp8266:
  #   board: nodemcuv2
  #   restore_from_flash: true
  esp32:
    board: esp32doit-devkit-v1
  
  wifi:
    ssid: !secret wifi_ssid2
    password: !secret wifi_password2
  
    # Enable fallback hotspot (captive portal) in case wifi connection fails
    ap:
      ssid: "${friendly_name} Fallback Hotspot"
      password: ""                  # password of fallback hotspot
  
  #--------------------------------------------
  #------------- Advanced Section -------------
  #--------------------------------------------
  captive_portal:
  
  esphome:
    name: ${device_name}
    includes: shared/melachaplug.h
    on_boot:
      - priority: 800                      # This is where all hardware initialization of vital components is executed
        then:
          - switch.turn_on: shabbos_mode      # ensures the device starts off in Shabbos mode
      - priority: -100.0                   # pretty much everything should already be initialized
        then:
          - lambda: "MelachaPlug::onBoot();"
  
  # frequency of data flushed to the flash
  preferences:
    flash_write_interval: 5min
  
  # Enable logging
  logger:
  
  # Enable Home Assistant API
  api:
  
  # Enable Over The Air updates
  ota:
  
  # Enable Web Interface
  web_server:
  
  # Enable HTTP Requests (for auto location API)
  http_request:
    useragent: esphome/device
    timeout: 10s
  
  # Gets the current date and time
  time:
    - platform: sntp
      id: sntp_time
      timezone: ${timezone}
      update_interval: 60min
      on_time_sync:
        then:
          - lambda: |-
              MelachaPlug::convertToHdate();
  
  # Enable Sun calculations 
  sun:
    id: mysun
    latitude: ${latitude}
    longitude: ${longitude}
  
    on_sunset:
      - elevation: ${deg_shabbos_start}° # degree to assume Shabbos or Yom Tov starts
        then:
          - lambda: |-
              MelachaPlug::onShabbosStart();
  
      - elevation: ${deg_shabbos_end}° # degree that Shabbos or Yom Tov Ends
        then:
          - lambda: |-
              MelachaPlug::onShabbosEnd();
  
  # Sensors  
  sensor:
    - platform: sun
      name: ${friendly_name} Sun Elevation
      id: sun_elevation
      type: elevation
  
  # Text Sensors 
  text_sensor:
    - platform: sun
      name: ${friendly_name} Next Sunrise
      type: sunrise
    - platform: sun
      name: ${friendly_name} Early Shabbos and Yom Tov Start (elevated ${deg_shabbos_start}°)
      type: sunset
      elevation: ${deg_shabbos_start}°
    - platform: sun
      name: ${friendly_name} Next Sunset (elevated -0.833° - default)
      type: sunset
    - platform: sun
      name: ${friendly_name} Tzeit Hakochavim - Nightfall (elevated ${deg_tzeit}°)
      type: sunset
      elevation: ${deg_tzeit}°
    - platform: sun
      name: ${friendly_name} Shabbos and Yom Tov Ends (elevated ${deg_shabbos_end}°)
      type: sunset
      elevation: ${deg_shabbos_end}°
  
    - platform: template
      name: ${friendly_name} Hebrew Date
      id: hebrew_date
  
      # text sensor to display the auto generated location 
    - platform: template
      name: ${friendly_name} Auto Location Found
      id: auto_location_found
    - platform: template
      name: ${friendly_name} Latitude
      id: lat_text_sensor
      on_value:
        then:
          lambda: |-
            id(mysun).set_latitude(atof(x.c_str()));
            id(lat_global) = atof(x.c_str());    // set the global variable to store it on reboot
            MelachaPlug::convertToHdate();       // recheck the hebrew date on location change 
    - platform: template
      name: ${friendly_name} Longitude
      id: lon_text_sensor
      on_value:
        then:
          lambda: |-
            id(mysun).set_longitude(atof(x.c_str()));
            id(lon_global) = atof(x.c_str());    // set the global variable to store it on reboot
            MelachaPlug::convertToHdate();       // recheck the hebrew date on location change
    - platform: template
      name: ${friendly_name} Keyboard
      id: keyboard
  
  # variables publicly available
  globals:
    - id: deg_shabbos_start_global
      type: float
      restore_value: no
      initial_value: ${deg_shabbos_start}
    - id: deg_shabbos_end_global
      type: float
      restore_value: no
      initial_value: ${deg_shabbos_end}
    
    # Latitude and longitude that will save on reboot
    - id: lat_global
      type: float
      restore_value: yes
    - id: lon_global
      type: float
      restore_value: yes
    - id: manual_location
      type: float
      restore_value: no
      initial_value: ${manual_location}
  
  binary_sensor:
    - platform: gpio
      name: ${friendly_name} Button 1
      id: button_1
      pin:
        number: ${button_1_gpio}
        mode: INPUT_PULLUP
        inverted: true
      filters:
        - delayed_on: 10ms
      on_click:
        then:
          - switch.toggle: relay_1
  
  switch:
    - platform: gpio
      name: ${friendly_name} Relay 1
      id: relay_1
      pin: ${relay_1_gpio}
      restore_mode: "ALWAYS_OFF"  # defaults to off in case of reset on Shabbos or Yom Tov
      on_turn_on:
        then:
          - switch.turn_on: built_in_led
      on_turn_off:
        then:
          - switch.turn_off: built_in_led
  
    # switch which can disable the button
    - platform: gpio
      name: ${friendly_name} Button 1 - Shabbos Switch
      id: button_1_switch
      pin: ${button_1_gpio}
      inverted: false
      restore_mode: "ALWAYS_ON"
  
    - platform: gpio
      name: ${friendly_name} Built-in LED
      id: built_in_led
      pin: ${built_in_led_gpio}
      restore_mode: "ALWAYS_OFF"
  
    # Shabbos mode switch - here is where we set what happens when it turns on and off
    - platform: template
      name: ${friendly_name} Shabbos Mode
      id: shabbos_mode
      optimistic: true      # set to true for status to be updated immediately
      turn_on_action:
        then:
          - switch.turn_off: relay_1           # turn off plug for Shabbos and Yom Tov
          - switch.turn_off: button_1_switch   # disables button for Shabbos and Yom Tov
          - switch.turn_on: flash_led
      turn_off_action:
        then:
          - switch.turn_off: flash_led         # must be before relay
          - switch.turn_on: button_1_switch    # re-enable button for weekdays
          - switch.turn_on: relay_1            # turn on plug for weekday
  
    # LED flash preset
    - platform: template
      name: ${friendly_name} Flash LED
      optimistic: yes
      id: flash_led
      turn_on_action:
      - while:
          condition:
            lambda: "return true;"
          then:
          - switch.turn_on: built_in_led
          - delay: 500ms 
          - switch.turn_off: built_in_led
          - delay: 500ms
      turn_off_action:
      - switch.turn_off: built_in_led
  
    # update auto detect location
    - platform: template
      name: ${friendly_name} Auto Detect Location
      optimistic: yes
      turn_on_action:
        - lambda: "MelachaPlug::autoSetLocation();"
      turn_off_action:
        - lambda: |-
            id(lat_text_sensor).publish_state("0");
            id(lon_text_sensor).publish_state("0");
            id(manual_location) = true;